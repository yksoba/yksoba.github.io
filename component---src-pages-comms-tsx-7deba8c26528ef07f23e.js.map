{"version":3,"file":"component---src-pages-comms-tsx-7deba8c26528ef07f23e.js","mappings":"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","sources":["webpack:///./src/images/comms/icon-1.png","webpack:///./src/images/comms/icon-2.png","webpack:///./src/images/comms/half-body-1.png","webpack:///./src/images/comms/half-body-2.png","webpack:///./src/images/comms/full-1.png","webpack:///./src/images/comms/full-2.png","webpack:///./src/components/gallery/panel.tsx","webpack:///./src/components/gallery/mini-gallery.tsx","webpack:///./src/lib/use-client-dims.ts","webpack:///./src/pages/comms.tsx"],"sourcesContent":["export default __webpack_public_path__ + \"static/icon-1-178778b03cad49404c207b4de5a859ed.png\";","export default __webpack_public_path__ + \"static/icon-2-edfe7c00726bb44e534a33d04c87f1af.png\";","export default __webpack_public_path__ + \"static/half-body-1-403a512c0a7b93d4ca87e0e89b4c0f1f.png\";","export default __webpack_public_path__ + \"static/half-body-2-557d031fe42d5fbf64950feaf3c69885.png\";","export default __webpack_public_path__ + \"static/full-1-e3a09ec68e3f04e32e12bd2e136ce305.png\";","export default __webpack_public_path__ + \"static/full-2-3292be93fa81354e58f956afa9747b45.png\";","import React from \"react\";\nimport { ReactNode } from \"react\";\nimport { FlexCol, Flex } from \"../flex\";\n\nexport const Panel = ({\n  content, cover, imgsrc, bgpos = \"50%\",\n}: {\n  content?: ReactNode;\n  cover?: ReactNode;\n  imgsrc: string;\n  bgpos?: string;\n}) => {\n  return (\n    <FlexCol\n      flexGrow={1}\n      minWidth={250}\n      overflow=\"clip\"\n      width=\"100%\"\n      height=\"100%\"\n      position=\"relative\"\n      sx={{\n        \"&::before\": {\n          content: '\"\"',\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n\n          background: `url(\"${imgsrc}\")`,\n          backgroundSize: \"cover\",\n          backgroundPosition: `${bgpos} 50%`,\n\n          transition: \"transform 0.2s, filter 0.2s\",\n        },\n\n        \"&:hover::before\": {\n          transform: \"scale(110%)\",\n          filter: \"brightness(0.4)\",\n        },\n\n        \"& #content\": {\n          opacity: \"0\",\n          transition: \"opacity 0.3s\",\n        },\n\n        \"&:hover #content\": {\n          opacity: \"1\",\n        },\n      }}\n    >\n      <Flex position=\"absolute\" width=\"100%\" height=\"100%\">\n        {cover}\n      </Flex>\n      <Flex position=\"absolute\" width=\"100%\" height=\"100%\" id=\"content\">\n        {content}\n      </Flex>\n    </FlexCol>\n  );\n};\n","import React from \"react\";\nimport { Flex } from \"../flex\";\nimport { useClientDims } from \"../../lib/use-client-dims\";\n\nexport const MiniGallery = ({ imgsrcs }: { imgsrcs: string[]; }) => {\n  const [ref, dims] = useClientDims();\n  const size = dims.clientWidth / 2 - 8;\n\n  return (\n    <Flex width=\"100%\" flexWrap=\"wrap\" gap={1} ref={ref}>\n      {imgsrcs.map((imgsrc, i) => (\n        <Flex\n          key={i}\n          width={size}\n          height={size}\n          border={6}\n          borderRadius={1}\n          borderColor=\"white\"\n          sx={{\n            background: `url(\"${imgsrc}\")`,\n            backgroundSize: \"cover\",\n            backgroundPosition: \"center\",\n          }} />\n      ))}\n    </Flex>\n  );\n};\n","import { useEffect, useLayoutEffect, useRef, useState } from \"react\";\n\nexport const useClientDims = <T extends HTMLElement = HTMLElement>() => {\n  const ref = useRef<T>(null);\n  const [clientDims, setClientDims] = useState({\n    clientWidth: 0,\n    clientHeight: 0,\n  });\n\n  useLayoutEffect(() => {\n    if (ref.current) {\n      setClientDims({\n        clientHeight: ref.current.clientHeight,\n        clientWidth: ref.current.clientWidth,\n      });\n    }\n  }, [ref.current?.clientHeight, ref.current?.clientWidth]);\n\n  useEffect(() => {\n    const listener = () => {\n      if (ref.current) {\n        setClientDims({\n          clientHeight: ref.current.clientHeight,\n          clientWidth: ref.current.clientWidth,\n        });\n      }\n    };\n\n    window?.addEventListener(\"resize\", listener);\n    return () => {\n      window?.removeEventListener(\"resize\", listener);\n    };\n  });\n\n  return [ref, clientDims] as const;\n};\n","import React, { PropsWithChildren } from \"react\";\nimport { ReactNode } from \"react\";\nimport { Layout } from \"../components/layout\";\nimport { FlexCol, Flex } from \"../components/flex\";\nimport icon1 from \"../images/comms/icon-1.png\";\nimport icon2 from \"../images/comms/icon-2.png\";\nimport halfbody1 from \"../images/comms/half-body-1.png\";\nimport halfbody2 from \"../images/comms/half-body-2.png\";\nimport full1 from \"../images/comms/full-1.png\";\nimport full2 from \"../images/comms/full-2.png\";\nimport { Typography } from \"@mui/material\";\nimport { Link } from \"gatsby\";\nimport { Panel } from \"../components/gallery/panel\";\nimport { MiniGallery } from \"../components/gallery/mini-gallery\";\n\nconst Commissions = () => {\n  return (\n    <Layout>\n      <title>yksoba - Commissions</title>\n\n      <Flex\n        width=\"0\"\n        height=\"fit-content\"\n        position=\"sticky\"\n        zIndex={1}\n        left=\"0\"\n      >\n        <FlexCol\n          py={1.5}\n          px={2}\n          ml={2}\n          mt={2}\n          color=\"white\"\n          bgcolor=\"rgba(0,0,0,0.5)\"\n        >\n          <Typography component=\"h1\" variant=\"h3\">\n            Commissions\n          </Typography>\n          <Typography variant=\"subtitle1\" mt={1} fontStyle=\"italic\">\n            Read the{\" \"}\n            <Link to=\"\" style={{ color: \"white\" }}>\n              terms of service\n            </Link>\n            <br />\n            All prices in USD\n          </Typography>\n        </FlexCol>\n      </Flex>\n\n      <Flex width=\"100%\" gap={1} bgcolor=\"black\">\n        <Panel\n          imgsrc={icon1}\n          bgpos=\"65%\"\n          cover={<Cover name=\"Icon\" price=\"$10\" />}\n          content={\n            <Content\n              imgsrcs={[icon1, icon2]}\n              caption={\n                <StyledList>\n                  <li>Neck and above</li>\n                  <li>Solid color or gradient background</li>\n                  <li>Fully colored/painted</li>\n                </StyledList>\n              }\n            />\n          }\n        />\n        <Panel\n          imgsrc={halfbody1}\n          bgpos=\"50%\"\n          cover={<Cover name=\"Half-Body\" price=\"$20\" />}\n          content={\n            <Content\n              imgsrcs={[halfbody1, halfbody2]}\n              caption={\n                <StyledList>\n                  <li>Torso and above</li>\n                  <li>Solid color or gradient background</li>\n                  <li>Fully colored/painted</li>\n                </StyledList>\n              }\n            />\n          }\n        />\n        <Panel\n          imgsrc={full1}\n          bgpos=\"70%\"\n          cover={<Cover name=\"Full-Body\" price=\"$30\" />}\n          content={\n            <Content\n              imgsrcs={[full1, full2]}\n              caption={\n                <StyledList>\n                  <li>Head to toe</li>\n                  <li>Solid color or gradient background</li>\n                  <li>Fully colored/painted</li>\n                </StyledList>\n              }\n            />\n          }\n        />\n      </Flex>\n    </Layout>\n  );\n};\n\nconst StyledList = ({ children }: PropsWithChildren<{}>) => {\n  return (\n    <Typography variant=\"body1\" color=\"white\">\n      <FlexCol\n        component=\"ul\"\n        sx={{\n          listStyleType: \"none\",\n          \"& > li::before\": { content: '\"– \"' },\n        }}\n      >\n        {children}\n      </FlexCol>\n    </Typography>\n  );\n};\n\nconst Content = ({\n  imgsrcs,\n  caption,\n}: {\n  imgsrcs: string[];\n  caption?: ReactNode;\n}) => {\n  return (\n    <FlexCol justifyContent=\"center\" width=\"100%\" px={6}>\n      <MiniGallery imgsrcs={imgsrcs} />\n      {caption}\n    </FlexCol>\n  );\n};\n\nconst Cover = ({ name, price }: { name: string; price: string }) => {\n  return (\n    <FlexCol justifyContent=\"end\" p={3}>\n      <Flex px={1.5} bgcolor=\"rgba(0,0,0,0.5)\" color=\"white\" fontSize=\"2em\">\n        {name} {price}\n      </Flex>\n    </FlexCol>\n  );\n};\n\nexport default Commissions;\n"],"names":["Panel","content","cover","imgsrc","bgpos","React","FlexCol","flexGrow","minWidth","overflow","width","height","position","sx","background","backgroundSize","backgroundPosition","transition","transform","filter","opacity","Flex","id","MiniGallery","imgsrcs","ref","useRef","useState","clientWidth","clientHeight","clientDims","setClientDims","useLayoutEffect","current","_ref$current","_ref$current2","useEffect","listener","window","addEventListener","removeEventListener","useClientDims","size","flexWrap","gap","map","i","key","border","borderRadius","borderColor","StyledList","children","Typography","variant","color","component","listStyleType","Content","caption","justifyContent","px","Cover","name","price","p","bgcolor","fontSize","Layout","zIndex","left","py","ml","mt","fontStyle","Link","to","style","icon1","icon2","halfbody1","halfbody2","full1","full2"],"sourceRoot":""}